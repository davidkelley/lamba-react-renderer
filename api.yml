swagger: "2.0"
schemes:
  - https
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  body-only:
    validateRequestBody: true
    validateRequestParameters: false
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
definitions:
  Empty:
    type: object
    description: There is no schema
    title: Empty Schema
  Error:
    type: object
    title: Error Schema
    description: There was an error processing the request
    properties:
      message:
        type: string
        description: The Amazon-generated or custom error message
      type:
        type: string
        description: The type of error generated
      __raw:
        type: object
        title: Raw Error
        description: |
          This object contains the raw message sent from the
          underlying integration
paths:
  /:
    x-amazon-apigateway-any-method:
      produces:
        - text/html
      consumes:
        - text/html
      parameters:
        - name: render
          in: path
          required: true
          type: string
      responses:
        "200":
          description: The page was rendered successfully
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
            Cache-Control:
              type: "string"
        "400":
          description: A 400 error occurred
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: A 500 error occurred
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: aws_proxy
        credentials: "arn:aws:iam::{{ AWS_ACCOUNT_ID }}:role/${stageVariables.ExecutionRoleName}"
        httpMethod: POST
        uri: "arn:aws:apigateway:{{ AWS_REGION }}:lambda:path//2015-03-31/functions/arn:aws:lambda:{{ AWS_REGION }}:{{ AWS_ACCOUNT_ID }}:function:${stageVariables.RenderFunction}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Content-Type: "integration.response.header.Content-Type"
              method.response.header.Cache-Control: "integration.response.header.Cache-Control"
        passthroughBehavior: when_no_match
  /{render+}:
    x-amazon-apigateway-any-method:
      produces:
        - text/html
      consumes:
        - text/html
      parameters:
        - name: render
          in: path
          required: true
          type: string
      responses:
        "200":
          description: The page was rendered successfully
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
            Cache-Control:
              type: "string"
        "400":
          description: A 400 error occurred
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: A 500 error occurred
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: aws_proxy
        credentials: "arn:aws:iam::{{ AWS_ACCOUNT_ID }}:role/${stageVariables.ExecutionRoleName}"
        httpMethod: POST
        uri: "arn:aws:apigateway:{{ AWS_REGION }}:lambda:path//2015-03-31/functions/arn:aws:lambda:{{ AWS_REGION }}:{{ AWS_ACCOUNT_ID }}:function:${stageVariables.RenderFunction}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Content-Type: "integration.response.header.Content-Type"
              method.response.header.Cache-Control: "integration.response.header.Cache-Control"
        passthroughBehavior: when_no_match
